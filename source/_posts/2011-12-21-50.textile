---
layout: post
title: '练个手'
date: 2011-12-21
wordpress_id: 50
permalink: /blogs/50
comments: true
---
1－1000000 这样一个无序序列，加入一个1－1000000之间的数，如何在不使用额外空间的情况下快速找出这个数？

[cc lang="python"]
#!/usr/bin/python
#coding=utf-8

import random

COUNT = 1000000

ranNum = random.randint(1,COUNT)
print "repeating number: %d"% ranNum
nums = [i for i in xrange(1,COUNT + 1)]
nums.append(ranNum)
random.shuffle(nums)

nums[0], p = 0, nums[0]
while True:
    if nums[p] == 0:
        print "found %d" % p
        break
    nums[p], p = 0, nums[p]

[/cc]

但是我time了一下这种算法，比较不稳定，大部分时候需要1秒以上的时间才能找到

如果用以下这种计算和再相减的算法，时间可以稳定在0.8秒左右
[cc lang="python"]
#!/usr/bin/python
#coding=utf-8

import random


COUNT = 1000000

ranNum = random.randint(1,COUNT)
print "repeating number: %d" % ranNum
nums = [i for i in xrange(1,COUNT + 1)]
nums.append(ranNum)
random.shuffle(nums)

sum1 = sum(nums)
sum2 = (1 + COUNT)*COUNT/2
print "found %d" % (sum1 - sum2)
[/cc] 
